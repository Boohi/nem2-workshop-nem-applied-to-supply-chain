---
layout: post
title:  "Registering products"
permalink: /lessons/registering-products/
---

Open the [dashboard](http://localhost:4200). The warehouse operator uses it to register products and send safety seals. However, the integration with NEM blockchain technology is not 100% done. Step by step, you will have to complete the code to make the use case work.

## Background

Registering a product consists of:

1) Create a new product in the existent SQL database.

2) Create a new blockchain account.

3) Send an initial transaction to the account.

The operator will click ``Create Product`` button in the web app.  The server, which has loaded the company account, will create the product and announce the transaction to the blockchain. 

Although the operator performs the action, we have decided to announce the transaction from the server side. This enables us to add the company as the owner of the account in the moment of the creation.

![use-case-nem-creation]({{ site.baseurl }}/assets/images/use-case-nem-creation.png)

## Solution

Under ``Create Product`` tab, click ``Create New Product`` button.

![screenshot-register-product]({{ site.baseurl }}/assets/images/screenshot-register-product.png)

    ℹ️ The server, the dashboard and the catapult bootstrap service must be running.

When clicking the button, you are making a HTTP POST request to the server. The company's server is responsible for creating a new product and saving it it in the database.

The public key is generated directly in the dashboard. We are applying the sha256 cryptographic hash algorithm to ('company' +  product ID). This latest ID generated by the MySQL database. 

## Is the product in the blockchain? 

1\. Click the product number. The product information screen shows the state of a product. As you can see, NEM blockchain does not know anything about this product. 

![screenshot-first-transfer-transaction]({{ site.baseurl }}/assets/images/screenshot-first-transfer-transaction.png)

The product will be stored on the blockchain with the first issued transaction. You must add a function that registers the product in the blockchain.

2\. Open ``project/server/.env``, and add the company's private key.

{% highlight bash %}

COMPANY_PRIVATE_KEY='B...3'

{% endhighlight %}

3\. Open ``project/server/src/controller/product/product.controller.ts`` and edit ``createProduct`` function. After saving the product in the database, send a first transaction to the product to timestamp its creation's date.

{% highlight typescript %}
export let createProduct: ExpressSignature = (request, response, next) => {
    const productService = new ProductService();

    const companyPrivateKey = process.env.COMPANY_PRIVATE_KEY as string;
    const companyAccount = Account
        .createFromPrivateKey(companyPrivateKey, NetworkType.MIJIN_TEST);

    // Save product in the database and return product created
    return productService.createProduct()
        .pipe(
            mergeMap((product) => {
                return productService.registerProductInBlockchain(companyAccount, product.id).pipe(
                    map((ignored) => product));
            }),
        )
        .subscribe((product) => response.status(200).send(product.toMessage()),
            (err) => response.status(400).send(err));
};
{% endhighlight %}

4\. Open ``project/server/src/domain/product/product.service.ts`` and complete ``registerProductBlockchain`` function.

{% highlight typescript %}
public registerProductInBlockchain(account: Account, productId: number): Observable<TransactionAnnounceResponse> {

    // Create deterministic public key for product
    const product = Asset.create(account.publicAccount,
        "company",
        productId.toString(),
        {});

    // Create transaction
    const publishableProduct = AssetService.publish(product);

    // Sign transfer transaction with company account
    const signedTransaction = account.sign(publishableProduct);

    return this.transactionHttp.announce(signedTransaction);
}
{% endhighlight %}

We are generating the first transaction using the third party library [nem2-asset-identifier](https://github.com/aleixmorgadas/nem2-asset-identifier).

    ℹ️  This library helps us to identify assets in nem blockchain, by creating the public key in a deterministic way. It also provides a set of standards to read and write in accounts that represent assets.

Once the transaction is created and signed with the company's account, it can be announced to the network. **Restart the server to apply the changes**.

5\.Create a new product, and wait a few seconds until the transaction gets confirmed.
 
6\.Click on the product's number. Under **Last 10 transactions**, see the product registered in the blockchain.

![screenshot-product-detail]({{ site.baseurl }}/assets/images/screenshot-product-detail.png)